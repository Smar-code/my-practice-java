/*
 * booking.com Demand API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Booker;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccommodationsAvailabilityInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-17T20:12:31.101197700+05:30[Asia/Calcutta]", comments = "Generator version: 7.7.0")
public class AccommodationsAvailabilityInput {
  public static final String SERIALIZED_NAME_ACCOMMODATION = "accommodation";
  @SerializedName(SERIALIZED_NAME_ACCOMMODATION)
  private Integer accommodation;

  public static final String SERIALIZED_NAME_BOOKER = "booker";
  @SerializedName(SERIALIZED_NAME_BOOKER)
  private Booker booker;

  public static final String SERIALIZED_NAME_CHECKIN = "checkin";
  @SerializedName(SERIALIZED_NAME_CHECKIN)
  private LocalDate checkin;

  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private LocalDate checkout;

  public AccommodationsAvailabilityInput() {
  }

  public AccommodationsAvailabilityInput accommodation(Integer accommodation) {
    this.accommodation = accommodation;
    return this;
  }

  /**
   * A signed integer number that uniqely identifies an accommodation property.
   * minimum: 1
   * @return accommodation
   */
  @javax.annotation.Nonnull
  public Integer getAccommodation() {
    return accommodation;
  }

  public void setAccommodation(Integer accommodation) {
    this.accommodation = accommodation;
  }


  public AccommodationsAvailabilityInput booker(Booker booker) {
    this.booker = booker;
    return this;
  }

  /**
   * Get booker
   * @return booker
   */
  @javax.annotation.Nonnull
  public Booker getBooker() {
    return booker;
  }

  public void setBooker(Booker booker) {
    this.booker = booker;
  }


  public AccommodationsAvailabilityInput checkin(LocalDate checkin) {
    this.checkin = checkin;
    return this;
  }

  /**
   * The checkin date.
   * @return checkin
   */
  @javax.annotation.Nonnull
  public LocalDate getCheckin() {
    return checkin;
  }

  public void setCheckin(LocalDate checkin) {
    this.checkin = checkin;
  }


  public AccommodationsAvailabilityInput checkout(LocalDate checkout) {
    this.checkout = checkout;
    return this;
  }

  /**
   * The checkout date.
   * @return checkout
   */
  @javax.annotation.Nonnull
  public LocalDate getCheckout() {
    return checkout;
  }

  public void setCheckout(LocalDate checkout) {
    this.checkout = checkout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccommodationsAvailabilityInput accommodationsAvailabilityInput = (AccommodationsAvailabilityInput) o;
    return Objects.equals(this.accommodation, accommodationsAvailabilityInput.accommodation) &&
        Objects.equals(this.booker, accommodationsAvailabilityInput.booker) &&
        Objects.equals(this.checkin, accommodationsAvailabilityInput.checkin) &&
        Objects.equals(this.checkout, accommodationsAvailabilityInput.checkout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accommodation, booker, checkin, checkout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccommodationsAvailabilityInput {\n");
    sb.append("    accommodation: ").append(toIndentedString(accommodation)).append("\n");
    sb.append("    booker: ").append(toIndentedString(booker)).append("\n");
    sb.append("    checkin: ").append(toIndentedString(checkin)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accommodation");
    openapiFields.add("booker");
    openapiFields.add("checkin");
    openapiFields.add("checkout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accommodation");
    openapiRequiredFields.add("booker");
    openapiRequiredFields.add("checkin");
    openapiRequiredFields.add("checkout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccommodationsAvailabilityInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccommodationsAvailabilityInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccommodationsAvailabilityInput is not found in the empty JSON string", AccommodationsAvailabilityInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccommodationsAvailabilityInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccommodationsAvailabilityInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccommodationsAvailabilityInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `booker`
      Booker.validateJsonElement(jsonObj.get("booker"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccommodationsAvailabilityInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccommodationsAvailabilityInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccommodationsAvailabilityInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccommodationsAvailabilityInput.class));

       return (TypeAdapter<T>) new TypeAdapter<AccommodationsAvailabilityInput>() {
           @Override
           public void write(JsonWriter out, AccommodationsAvailabilityInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccommodationsAvailabilityInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccommodationsAvailabilityInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccommodationsAvailabilityInput
   * @throws IOException if the JSON string is invalid with respect to AccommodationsAvailabilityInput
   */
  public static AccommodationsAvailabilityInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccommodationsAvailabilityInput.class);
  }

  /**
   * Convert an instance of AccommodationsAvailabilityInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

