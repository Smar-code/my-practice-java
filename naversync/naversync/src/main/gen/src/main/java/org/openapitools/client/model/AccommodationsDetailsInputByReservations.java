/*
 * booking.com Demand API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccommodationsDetailsInputByReservations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-17T20:12:31.101197700+05:30[Asia/Calcutta]", comments = "Generator version: 7.7.0")
public class AccommodationsDetailsInputByReservations {
  public static final String SERIALIZED_NAME_RESERVATIONS = "reservations";
  @SerializedName(SERIALIZED_NAME_RESERVATIONS)
  private List<Long> reservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * Gets or Sets extras
   */
  @JsonAdapter(ExtrasEnum.Adapter.class)
  public enum ExtrasEnum {
    ACCOMODATION_DETAILS("accomodation_details"),
    
    POLICIES("policies"),
    
    EXTRA_CHARGES("extra_charges");

    private String value;

    ExtrasEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExtrasEnum fromValue(String value) {
      for (ExtrasEnum b : ExtrasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExtrasEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExtrasEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExtrasEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExtrasEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExtrasEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTRAS = "extras";
  @SerializedName(SERIALIZED_NAME_EXTRAS)
  private List<ExtrasEnum> extras = new ArrayList<>();

  public AccommodationsDetailsInputByReservations() {
  }

  public AccommodationsDetailsInputByReservations reservations(List<Long> reservations) {
    this.reservations = reservations;
    return this;
  }

  public AccommodationsDetailsInputByReservations addReservationsItem(Long reservationsItem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<>();
    }
    this.reservations.add(reservationsItem);
    return this;
  }

  /**
   * Get reservations
   * @return reservations
   */
  @javax.annotation.Nonnull
  public List<Long> getReservations() {
    return reservations;
  }

  public void setReservations(List<Long> reservations) {
    this.reservations = reservations;
  }


  public AccommodationsDetailsInputByReservations currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * A three letter code
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccommodationsDetailsInputByReservations extras(List<ExtrasEnum> extras) {
    this.extras = extras;
    return this;
  }

  public AccommodationsDetailsInputByReservations addExtrasItem(ExtrasEnum extrasItem) {
    if (this.extras == null) {
      this.extras = new ArrayList<>();
    }
    this.extras.add(extrasItem);
    return this;
  }

  /**
   * input parameter to request
   * @return extras
   */
  @javax.annotation.Nullable
  public List<ExtrasEnum> getExtras() {
    return extras;
  }

  public void setExtras(List<ExtrasEnum> extras) {
    this.extras = extras;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccommodationsDetailsInputByReservations accommodationsDetailsInputByReservations = (AccommodationsDetailsInputByReservations) o;
    return Objects.equals(this.reservations, accommodationsDetailsInputByReservations.reservations) &&
        Objects.equals(this.currency, accommodationsDetailsInputByReservations.currency) &&
        Objects.equals(this.extras, accommodationsDetailsInputByReservations.extras);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservations, currency, extras);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccommodationsDetailsInputByReservations {\n");
    sb.append("    reservations: ").append(toIndentedString(reservations)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    extras: ").append(toIndentedString(extras)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservations");
    openapiFields.add("currency");
    openapiFields.add("extras");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reservations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccommodationsDetailsInputByReservations
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccommodationsDetailsInputByReservations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccommodationsDetailsInputByReservations is not found in the empty JSON string", AccommodationsDetailsInputByReservations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccommodationsDetailsInputByReservations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccommodationsDetailsInputByReservations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccommodationsDetailsInputByReservations.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("reservations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("reservations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservations` to be an array in the JSON string but got `%s`", jsonObj.get("reservations").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extras") != null && !jsonObj.get("extras").isJsonNull() && !jsonObj.get("extras").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extras` to be an array in the JSON string but got `%s`", jsonObj.get("extras").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccommodationsDetailsInputByReservations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccommodationsDetailsInputByReservations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccommodationsDetailsInputByReservations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccommodationsDetailsInputByReservations.class));

       return (TypeAdapter<T>) new TypeAdapter<AccommodationsDetailsInputByReservations>() {
           @Override
           public void write(JsonWriter out, AccommodationsDetailsInputByReservations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccommodationsDetailsInputByReservations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccommodationsDetailsInputByReservations given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccommodationsDetailsInputByReservations
   * @throws IOException if the JSON string is invalid with respect to AccommodationsDetailsInputByReservations
   */
  public static AccommodationsDetailsInputByReservations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccommodationsDetailsInputByReservations.class);
  }

  /**
   * Convert an instance of AccommodationsDetailsInputByReservations to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

